-- 10.1. Напишите фукцию envLength, которая возвращает длину
-- окружения, необходимого для вычисления значения формулы.  Если в
-- формуле нет переменных, то длина равна 0, иначе длина равна
-- максимальному номеру переменной плюс 1.

-- envLength :: Formula -> Int

-- 10.2. Напишите фукцию allFormulaEnvs, которая возвращает все
-- окружения фиксированной длины, достаточной для вычисления значения
-- формулы.

-- allFormulaEnvs :: Formula -> [Environment]

-- 10.3. Напишите фукцию isConstant c f, которая определяет, является
-- ли формула f константой, принимающей значение c на всех окружениях

-- isConstant :: Domain -> Formula -> Bool

-- 10.4. Напишите функцию collectVars2, аналогичную collectVars1,
-- использующую списочную монаду. Список уже определен в Prelude как
-- член класса Monad, поэтому на нём можно использовать запись >>=.

-- collectVars2 :: Formula -> [Int]

-- 10.5. Разностный список -- это функция, которая принимает
-- суффикс списка и возвращает целый список, аналогично функциям типа
-- ShowS. Напишите функцию collectVars3, аналогичную collectVars1, но
-- использующие разностные списки.

-- collectVars3 :: Formula -> [Int]
