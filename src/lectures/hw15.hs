-- Указания к заданию про случайные формулы

-- Если при загрузки модуля RandomFormula.hs Haskell жалуется на
-- отсутствие модуля System.Random, нужно сделать следующее.
-- 1. Открыть командную строку Windows (Кнопка "Пуск", напечатать "cmd").
-- 2. cabal update
-- 3. cabal install random

-- Если Haskell не может найти Control.Monad.State, нужно дать команду
-- cabal install mtl

-- Рекомендуется написать следующие функции в модуле BooleanFormula.

-- randomInt (m, n) возвращает случайное число m <= k <= n.
-- Использует следующую функцию из System.Random.
-- randomR :: (RandomGen g, Random a) => (a, a) -> g -> (a, g)
-- Напоминание: класс Random включает типы, значения которых можно
-- генерировать случайным образом. Содержит Int, Float, Char, Bool и др.
randomInt :: (Int, Int) -> R Int
randomInt range = state (randomR range)

-- Принимает монадное значение (действие) и начальное значение для
-- генератора случайных чисел. Возвращает настоящее значение.
-- Второй аргумент может быть произвольным целым.
runR :: R a -> Int -> a
runR action seed = fst (runState action (mkStdGen seed))

-- chooseAction [(p1, a1), ..., (pn, an)] k возвращает aj, такое что
-- sum_{i=1}^{j-1} pi <= k < sum_{i=1}^j pi.
-- Требования: n > 0, p1 > 0, ..., pn > 0, 0 <= k < sum_{i=1}^n ai.
-- Не использует случайные числа или монады.
chooseAction :: [(Int, a)] -> Int -> a

-- Принимает список монадных значений (действий) с целочисленными весами.
-- Выбирает и возвращает одно из действий с помощью случайного числа,
-- полученного от randomInt.
frequency :: [(Int, R a)] -> R a

-- Возвращается одно из V 0, ..., V (n-1)
-- Требование: n > 0
randomVar :: Int -> R Formula

-- Возвращает формулу T или F с вероятностью 0,5
randomConst :: R Formula
randomConst = frequency [(1, return (C F [])), (1, return (C T []))]

-- Возвращает случайную бинарную связку. Если все семь связок, объявленных
-- в BooleanSyntax, равновероятны, то можно дать следующее определение.
randomBin :: R Op
randomBin = frequency [(1, return And), (1,  return Or), (1, return If),
                       (1, return Iff), (1,  return Xor), (1, return Nand),
                       (1, return Nor)]

-- Возвращает случайную формулу в виде монадного значения.
-- Первый аргумент: максимальная глубина формулы.
-- Второй аргумент: максимальное количество переменных в формуле
rf :: Int -> Int -> R Formula

-- Возвращает случайную формулу.
-- Первый аргумент: максимальная глубина.
-- Второй аргумент: максимальное количесвто переменных.
-- Третий аргумент: начальное значение для генератора случайных чисел.
randomFormula :: Int -> Int -> Int -> Formula
