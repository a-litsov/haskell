-- 9.1. Напишите фукцию correctArity, которая проверяет, что
-- арность каждого оператора, объявленная в модуле BooleanSyntax,
-- совпадает с действительным количеством его аргументов в формуле.

correctArity :: Formula -> Bool

-- 9.2. Напишите функцию lookupVar, возвращающую значение переменной
-- в окружении.

lookupVar :: Environment -> Var -> Domain

-- 9.3. Напишите фукцию eval, возвращающую значение формулы в окружении.
-- Значение операторов возвращаются функцией evalOp в модуле BooleanSyntax.

eval :: Environment -> Formula -> Domain

-- 9.4. Напишите фукцию fullParen, которая возвращает текстовое
-- представление формулы, где каждая состовная подформула с
-- положительным числом аргументов окружена скобками. Переменные и
-- константы (то есть нульарных функций) окружать скобками не нужно.

fullParen :: Formula -> ShowS

-- Вариант, учитывающий приоритет и ассоциативность операций

-- Скобки вокруг констант (связок арности 0) не ставятся.
-- Операции арности 1 являются префиксными или отображаются
-- специальным образом. Например, C Neg [f] отображается как ~f
-- в тексте и \overline{f} в LaTeX.

-- Инфиксные операции

-- Пусть данная формула (второй аргумент функции ниже) является левым
-- аргументом операции opExt, а главная операция формулы есть opInt.
-- Скобки вокруг формулы ставятся тогда и только тогда, когда
-- 1) приоритет opExt строго больше приоритета opInt, или
-- 2) приоритет opExt равен приоритету opInt и
-- 2а) opExt <> opInt, или
-- 2б) opExt = opInt имеет ассоциативность RA или NA.

-- Если данная формула является правым аргументом opExt, то в пункте 2б)
-- нужно заменить RA на LA.

-- 9.5. Напишите фукцию showFormula, которая возвращает текстовое
-- представление формулы, где вставляются только необходимые скобки
-- согласно описанию выше.
-- Первый аргумент: оператор, находящийся непосредственно снаружи формулы
--   (внешний оператор)
-- Второй аргумент: является ли формула левым (True) или правым (False)
--   аргументом внешнего оператора
-- Третий аргумент: формула, которую нужно напечатать

showFormula :: Op -> Bool -> Formula -> ShowS

-- 9.6. Напишите фукцию collectVars1, которая возвращает
-- отсортированный список переменных, входящих в формулу. Каждая
-- переменная входит в список не более одного раза.

collectVars1 :: Formula -> [Int]

-- 9.7. Напишите фукцию allEnvs, которая принимает количество n
-- переменных в формуле (вернее, номер максимальной переменной плюс 1)
-- и возвращает список всех окружений длины n в лексикографическом
-- порядке, где порядок на компонентах окружения определяется списком
-- domain.

allEnvs :: Int -> [Environment]
